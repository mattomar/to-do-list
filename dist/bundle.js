/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DOM.js":
/*!********************!*\
  !*** ./src/DOM.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendButtonContainerToContent: () => (/* binding */ appendButtonContainerToContent),\n/* harmony export */   appendFormToContent: () => (/* binding */ appendFormToContent),\n/* harmony export */   appendIncomingToContent: () => (/* binding */ appendIncomingToContent),\n/* harmony export */   appendProjectToContent: () => (/* binding */ appendProjectToContent),\n/* harmony export */   appendTodayToContent: () => (/* binding */ appendTodayToContent),\n/* harmony export */   setHTMLContent: () => (/* binding */ setHTMLContent)\n/* harmony export */ });\nfunction setHTMLContent(html) {\n    const contentDiv = document.getElementById(\"content\")\n    contentDiv.innerHTML = html\n}\n\n\n\nfunction appendFormToContent() {\n    const formContent = `<div class=\"popup-modal\" id=\"projectFormModal\">\n        <form id=\"projectForm\" class=\"form-container\">\n            <h2>Create New Project</h2>\n            <label for=\"projectName\">Project Name:</label>\n            <input type=\"text\" name=\"projectName\" required>\n            <button type=\"submit\">Create Project</button>\n        </form>\n    </div>\n\n    \n    \n    <form id=\"taskForm\">\n    <label for=\"taskName\">Task Name:</label><br>\n    <input type=\"text\" id=\"taskName\" name=\"taskName\" required><br>\n\n    <label for=\"startDate\">Start Date:</label><br>\n    <input type=\"date\" id=\"startDate\" name=\"startDate\" required><br>\n\n    <label for=\"finishDate\">Finish Date:</label><br>\n    <input type=\"date\" id=\"finishDate\" name=\"finishDate\" required><br>\n\n    <label for=\"priorityLevel\">Priority Level:</label><br>\n    <select id=\"priorityLevel\" name=\"priorityLevel\" required>\n        <option value=\"\">Select Priority</option>\n        <option value=\"low\">Low</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"high\">High</option>\n    </select><br>\n\n    <button type=\"submit\"\">Submit</button>\n    </form>\n    \n    `;\n\n    setHTMLContent(formContent)\n}\n\n\nfunction appendIncomingToContent() {\n    const incomingContent = `<div class=\"home-container\">\n    <div class=\"home-header\">\n        <i class=\"fas fa-inbox\" style=\"color: #0091ff; font-size: 22px;\"></i>\n        <p style=\"font-size: 22px;\">Incoming</p>\n    </div>\n</div>\n\n\n\n\n\n    <form id=\"taskForm\">\n    <label for=\"taskName\">Task Name:</label><br>\n    <input type=\"text\" id=\"taskName\" name=\"taskName\" required><br>\n\n    <label for=\"startDate\">Start Date:</label><br>\n    <input type=\"date\" id=\"startDate\" name=\"startDate\" required><br>\n\n    <label for=\"finishDate\">Finish Date:</label><br>\n    <input type=\"date\" id=\"finishDate\" name=\"finishDate\" required><br>\n\n    <label for=\"priorityLevel\">Priority Level:</label><br>\n    <select id=\"priorityLevel\" name=\"priorityLevel\" required>\n        <option value=\"\">Select Priority</option>\n        <option value=\"low\">Low</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"high\">High</option>\n    </select><br>\n\n    <button type=\"submit\"\">Submit</button>\n    </form>\n    <div id=\"incoming-tab-content\">\n    </div>\n`;\n\n    setHTMLContent(incomingContent)\n\n\n}\n\n\nfunction appendTodayToContent() {\n    const incomingContent = `<div class=\"today-container\">\n    <div class=\"today-header\">\n    <i class=\"fa-regular fa-star\" style=\"color: #ffae00;\"></i>\n    <p style=\"font-size: 22px;\">Today</p>\n    </div>\n</div>\n\n\n\n\n\n    <form id=\"taskForm\">\n    <label for=\"taskName\">Task Name:</label><br>\n    <input type=\"text\" id=\"taskName\" name=\"taskName\" required><br>\n\n    <label for=\"startDate\">Start Date:</label><br>\n    <input type=\"date\" id=\"startDate\" name=\"startDate\" required><br>\n\n    <label for=\"finishDate\">Finish Date:</label><br>\n    <input type=\"date\" id=\"finishDate\" name=\"finishDate\" required><br>\n\n    <label for=\"priorityLevel\">Priority Level:</label><br>\n    <select id=\"priorityLevel\" name=\"priorityLevel\" required>\n        <option value=\"\">Select Priority</option>\n        <option value=\"low\">Low</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"high\">High</option>\n    </select><br>\n\n    <button type=\"submit\"\">Submit</button>\n    </form>\n    <div id=\"today-tab-content\">\n    </div>\n`;\n\n    setHTMLContent(incomingContent)\n\n\n}\n\nfunction appendProjectToContent() {\n    const projectContent = `<div class=\"project-container\">\n    <div class=\"project-header\">\n    <i class=\"fa-solid fa-calendar-days\"style=\"color: #ff0000;\"></i>\n       <p style=\"font-size: 22px;\">Project</p>\n    </div>\n</div>\n\n\n\n\n\n    <form id=\"taskForm\">\n    <label for=\"taskName\">Task Name:</label><br>\n    <input type=\"text\" id=\"taskName\" name=\"taskName\" required><br>\n\n    <label for=\"startDate\">Start Date:</label><br>\n    <input type=\"date\" id=\"startDate\" name=\"startDate\" required><br>\n\n    <label for=\"finishDate\">Finish Date:</label><br>\n    <input type=\"date\" id=\"finishDate\" name=\"finishDate\" required><br>\n\n    <label for=\"priorityLevel\">Priority Level:</label><br>\n    <select id=\"priorityLevel\" name=\"priorityLevel\" required>\n        <option value=\"\">Select Priority</option>\n        <option value=\"low\">Low</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"high\">High</option>\n    </select><br>\n\n    <button type=\"submit\"\">Submit</button>\n    </form>\n    <div id=\"project-tab-content\">\n    </div>\n`;\n\n\n    setHTMLContent(projectContent)\n}\n\n\nfunction appendButtonContainerToContent() {\n    const buttonForTabContainerContent =\n        ` <div id=\"buttonForTabContainer\">\n        <button id=\"buttonForTab\">Add a task</button>\n        </div>\n\n        \n\n    <form id=\"taskForm\">\n    <label for=\"taskName\">Task Name:</label><br>\n    <input type=\"text\" id=\"taskName\" name=\"taskName\" required><br>\n\n    <label for=\"startDate\">Start Date:</label><br>\n    <input type=\"date\" id=\"startDate\" name=\"startDate\" required><br>\n\n    <label for=\"finishDate\">Finish Date:</label><br>\n    <input type=\"date\" id=\"finishDate\" name=\"finishDate\" required><br>\n\n    <label for=\"priorityLevel\">Priority Level:</label><br>\n    <select id=\"priorityLevel\" name=\"priorityLevel\" required>\n        <option value=\"\">Select Priority</option>\n        <option value=\"low\">Low</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"high\">High</option>\n    </select><br>\n\n    <button type=\"submit\"\">Submit</button>\n    </form>\n        `\n\n    setHTMLContent(buttonForTabContainerContent)\n\n}\n\n//# sourceURL=webpack://to-do-list/./src/DOM.js?");

/***/ }),

/***/ "./src/form.js":
/*!*********************!*\
  !*** ./src/form.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addProjectNameToContent: () => (/* binding */ addProjectNameToContent),\n/* harmony export */   appendTaskCardToTasksForTodayArray: () => (/* binding */ appendTaskCardToTasksForTodayArray),\n/* harmony export */   closeForm: () => (/* binding */ closeForm),\n/* harmony export */   createButtonForTab: () => (/* binding */ createButtonForTab),\n/* harmony export */   createProjectTab: () => (/* binding */ createProjectTab),\n/* harmony export */   displayClonedProjectsInTab: () => (/* binding */ displayClonedProjectsInTab),\n/* harmony export */   getSubmittedForm: () => (/* binding */ getSubmittedForm),\n/* harmony export */   getSubmittedName: () => (/* binding */ getSubmittedName),\n/* harmony export */   moveProjectsToProjectsTab: () => (/* binding */ moveProjectsToProjectsTab),\n/* harmony export */   moveTaskCardsToIncomingTab: () => (/* binding */ moveTaskCardsToIncomingTab),\n/* harmony export */   openForm: () => (/* binding */ openForm),\n/* harmony export */   sortTaskCardsByPriority: () => (/* binding */ sortTaskCardsByPriority)\n/* harmony export */ });\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isToday.mjs\");\n\n\n\n(0,_DOM__WEBPACK_IMPORTED_MODULE_0__.appendFormToContent)();\n\nconst fixedButton = document.querySelector('.fixed-button');\nconst popUp = document.querySelector('.popup-modal');\nconst contentDiv = document.getElementById('content');\n\nlet isFormOpen = false; // Flag to track if the form is open\n\nfunction openForm() {\n    if (!isFormOpen) {\n        fixedButton.addEventListener('click', function () {\n            popUp.style.display = \"flex\";\n            contentDiv.appendChild(popUp);\n            isFormOpen = true; // Update the flag\n        });\n    }\n}\n\nfunction closeForm() {\n    if (!isFormOpen) {\n        document.addEventListener('click', function (event) {\n            let targetElement = event.target;\n            let isButtonClicked = false;\n            let isFormClicked = false;\n\n            // Check if the clicked element or any of its ancestors match the fixedButton class or projectForm id\n            while (targetElement !== null) {\n                if (targetElement === fixedButton) {\n                    isButtonClicked = true;\n                    break;\n                }\n                if (targetElement.id === \"projectForm\") {\n                    isFormClicked = true;\n                    break;\n                }\n                targetElement = targetElement.parentElement;\n            }\n\n            // Close the pop-up modal if the click event did not occur on the fixed button, form, or the pop-up modal itself\n            if (!isButtonClicked && !isFormClicked && event.target !== popUp) {\n                popUp.style.display = \"none\";\n                console.log(event.target);\n                isFormOpen = false; // Update the flag\n            }\n        });\n    }\n}\n// Create a Set to keep track of existing project names\nconst existingProjectNames = new Set();\n\n// Function to get the submitted project name and handle the form submission\nfunction getSubmittedName(callback) {\n    const form = document.getElementById('projectForm');\n\n    form.addEventListener('submit', function (event) {\n        event.preventDefault(); // Prevent default form submission behavior\n\n        const projectName = form.elements.projectName.value.trim(); // Get the project name\n\n        // Check if the project name already exists\n        if (existingProjectNames.has(projectName)) {\n            // If the project name already exists, show a cute popup error message\n            showErrorPopup(`Project name \"${projectName}\" already exists. Please choose a different name.`);\n            return; // Exit the function to prevent creating a duplicate project tab\n        }\n\n        // Add the project name to the set of existing project names\n        existingProjectNames.add(projectName);\n\n        // Add the project name as a new tab under Projects\n        callback(projectName, event); // Pass event object to the callback\n\n        // Reset the form\n        form.reset();\n    });\n}\n\n// Function to show a cute popup error message\nfunction showErrorPopup(message) {\n    // Create a div element for the popup\n    const popup = document.createElement('div');\n    popup.textContent = message;\n    popup.style.position = 'fixed';\n    popup.style.top = '10%';\n    popup.style.left = '50%';\n    popup.style.transform = 'translateX(-50%)';\n    popup.style.padding = '10px 20px';\n    popup.style.backgroundColor = '#f8d7da';\n    popup.style.color = '#721c24';\n    popup.style.border = '1px solid #f5c6cb';\n    popup.style.borderRadius = '5px';\n    popup.style.zIndex = '1000';\n\n    // Append the popup to the body\n    document.body.appendChild(popup);\n\n    // Remove the popup after 3 seconds\n    setTimeout(() => {\n        document.body.removeChild(popup);\n    }, 3000);\n}\n\nfunction getSubmittedForm(callback) {\n    console.log(\"weeeeeee\")\n    const taskForm = document.getElementById('taskForm');\n\n\n    taskForm.addEventListener('submit', function (event) {\n        event.preventDefault(); // Ensure that the default form submission behavior is prevented\n\n        const taskName = taskForm.elements.taskName.value;\n        const startDate = taskForm.elements.startDate.value;\n        const finishDate = taskForm.elements.finishDate.value;\n        const priorityLevel = taskForm.elements.priorityLevel.value;\n\n        // Check if all fields are filled\n        if (taskName && startDate && finishDate && priorityLevel) {\n            // Call the callback function with the form data\n            callback(taskName, startDate, finishDate, priorityLevel);\n        } else {\n            alert('Please fill out all fields.');\n        }\n    });\n\n}\n\n\n\n\n\nfunction createButtonForTab() {\n\n\n    // Declare buttonForTab locally\n    const buttonForTab = document.createElement('button');\n    buttonForTab.setAttribute('id', 'buttonForTab');\n    buttonForTab.textContent = \"Add a task\"; // Set text content\n\n    // Add event listener to the button to show the task form\n    buttonForTab.addEventListener('click', () => {\n        toggleTaskFormVisibility();\n        getSubmittedForm(createTaskCard)\n        \n    });\n\n    // Create buttonForTabContainer and append buttonForTab\n    const newButtonForTabContainer = document.createElement('div');\n    newButtonForTabContainer.setAttribute('id', 'buttonForTabContainer');\n    newButtonForTabContainer.appendChild(buttonForTab);\n\n    // Append buttonForTabContainer to content\n    document.getElementById('content').appendChild(newButtonForTabContainer);\n}\n\nfunction addProjectNameToContent(projectName) {\n    const projectNameDiv = document.createElement('div');\n    projectNameDiv.classList.add('project-name');\n    projectNameDiv.textContent = `Project Name: ${projectName}`;\n    document.getElementById('content').appendChild(projectNameDiv);\n}\n\nlet currentProjectTabID = null;\n\nfunction createProjectTab(projectName) {\n    const projectTab = document.createElement('button');\n    projectTab.textContent = projectName;\n    projectTab.classList.add('sub-tab');\n\n    const tabID = `project-tab-${projectName.replace(/\\s/g, '-').toLowerCase()}`;\n    projectTab.id = tabID;\n\n    const tabContent = document.createElement('div');\n    tabContent.classList.add('tab-content');\n    tabContent.id = tabID;\n    contentArray.push(tabContent);\n\n    projectTab.addEventListener('click', () => {\n        // Hide all content elements\n        contentArray.forEach(content => {\n            content.style.display = 'none';\n        });\n        // Show the corresponding content\n        (0,_DOM__WEBPACK_IMPORTED_MODULE_0__.appendFormToContent)();\n        tabContent.style.display = 'block';\n        createButtonForTab();\n        addProjectNameToContent(projectName); \n        document.getElementById('content').appendChild(tabContent);\n        currentProjectTabID = tabID; // Update the current project ID\n        console.log(currentProjectTabID);\n    });\n\n\n\n    // Push the created tab into the array\n    projectTabs.push(projectTab);\n    console.log(projectTabs);\n    console.log(contentArray);\n\n\n\n\n\n    \n\n    return projectTab;\n}\n\n\n\n// Create an array to hold the tabs\nconst projectTabs = [];\nconst contentArray = [];\n\n\nfunction addToTaskCardArray(taskCard) {\n    taskCardArray.push(taskCard);\n    console.log(taskCardArray)\n}\n\nconst taskCardArray = []\nconst priorityMap = {\n    low: 1,\n    medium: 2,\n    high: 3\n};\n\n\nfunction setColorByPriority(priorityLevelElement, priorityLevel) {\n    switch (priorityLevel.toLowerCase()) {\n        case 'low':\n            priorityLevelElement.style.color = 'green';\n            break;\n        case 'medium':\n            priorityLevelElement.style.color = ' rgb(122, 122, 39)';\n            break;\n        case 'high':\n            priorityLevelElement.style.color = 'red';\n            break;\n        default:\n            break;\n    }\n}\n\n\n\nfunction createTaskCard(taskName, startDate, finishDate, priorityLevel, parentId) {\n    const taskCard = document.createElement('div');\n    taskCard.classList.add('task-card');\n\n    // Create elements for task details\n    const taskNameElement = document.createElement('h3');\n    taskNameElement.textContent = \"Task: \" + taskName;\n\n    const startDateElement = document.createElement('p');\n    startDateElement.textContent = \"Start Date: \" + startDate;\n\n    const finishDateElement = document.createElement('p');\n    finishDateElement.textContent = \"Finish Date: \" + finishDate;\n\n    const priorityLevelElement = document.createElement('p');\n    priorityLevelElement.textContent = \"Priority: \" + priorityLevel;\n    priorityLevelElement.classList.add('priority'); // Add a class to the priority element\n    setColorByPriority(priorityLevelElement, priorityLevel);\n\n    const trashIcon = document.createElement('i');\n    trashIcon.classList.add('fa-solid', 'fa-trash');\n    trashIcon.addEventListener('click', function () {\n        removeFromTaskCardArray(taskCard);\n        taskCard.remove(); // Remove the task card from the DOM when trash icon is clicked\n    });\n\n    // Append task details to task card\n    taskCard.appendChild(taskNameElement);\n    taskCard.appendChild(startDateElement);\n    taskCard.appendChild(finishDateElement);\n    taskCard.appendChild(priorityLevelElement);\n    taskCard.appendChild(trashIcon);\n\n    taskCard.dataset.finishDate = finishDate;\n\n    // Append the task card to the parent element\n    const parentElement = document.getElementById(parentId);\n    if (parentElement) {\n        parentElement.appendChild(taskCard);\n    } else {\n        console.error(\"Parent element not found with ID: \" + parentId);\n    }\n\n    appendTaskCardToProject(taskCard);\n    addToTaskCardArray(taskCard);\n    sortTaskCardsByPriority();\n}\n\nfunction getPriorityValue(taskCard) {\n    const priorityText = taskCard.querySelector('.priority').textContent.split(': ')[1].toLowerCase();\n    console.log(priorityText)\n    return priorityMap[priorityText];\n}\n\n\n\n function sortTaskCardsByPriority() {\n    const container = document.querySelector('.tab-content#' + currentProjectTabID); // Use the current project ID\n    const taskCardsInProject = taskCardArray.filter(taskCard => taskCard.parentElement.id === currentProjectTabID);\n    taskCardsInProject.sort((a, b) => {\n        const priorityA = getPriorityValue(a);\n        const priorityB = getPriorityValue(b);\n        return priorityB - priorityA;\n    });\n\n    container.innerHTML = '';\n\n    taskCardsInProject.forEach(taskCard => {\n        container.appendChild(taskCard);\n    });\n}\n\nfunction removeFromTaskCardArray(taskCard) {\n    const index = taskCardArray.indexOf(taskCard);\n    if (index !== -1) {\n        taskCardArray.splice(index, 1);\n        console.log(\"Task card removed from array:\", taskCardArray);\n    } else {\n        console.log(\"Task card not found in array.\");\n    }\n}\n\n\n\n\nfunction appendTaskCardToProject(taskCard) {\n    // Iterate through the contentArray to find the corresponding tab content\n    for (let i = 0; i < contentArray.length; i++) {\n        const tabContent = contentArray[i];\n\n        // Check if the current project tab ID matches the tab content ID\n        if (tabContent.id === currentProjectTabID) {\n            // Append the task card to the tab content\n            tabContent.appendChild(taskCard);\n\n            break; // Exit the loop once the match is found and task card is appended\n        }\n    }\n}\n\nfunction toggleTaskFormVisibility() {\n    const taskPopUp = document.getElementById('taskForm');\n    if (taskPopUp.style.display === 'none' || !taskPopUp.style.display) {\n        taskPopUp.style.display = 'block';\n    } else {\n        taskPopUp.style.display = 'none';\n    }\n}\n\n\n\nfunction moveTaskCardsToIncomingTab() {\n    const incomingTabContent = document.getElementById('incoming-tab-content');\n\n    // Iterate through the taskCardArray\n    for (let i = 0; i < taskCardArray.length; i++) {\n        const taskCard = taskCardArray[i];\n        const clonedTaskCard = taskCard.cloneNode(true);\n\n        // Add event listener to the trash icon of the cloned task card\n        const trashIcon = clonedTaskCard.querySelector('.fa-trash');\n        trashIcon.addEventListener('click', function () {\n            removeFromTaskCardArray(taskCard); // Remove from original array\n            taskCard.remove(); // Remove from DOM\n            clonedTaskCard.remove(); // Remove from cloned version\n        });\n\n        // Append the cloned task card to the incoming tab content area\n        incomingTabContent.appendChild(clonedTaskCard);\n    }\n}\nconst tasksForToday = [];\nfunction appendTaskCardToTasksForTodayArray() {\n    const todayTab = document.getElementById('today-tab-content');\n    for (let i = 0; i < taskCardArray.length; i++) {\n        const taskCard = taskCardArray[i];\n        const finishDate = new Date(taskCard.dataset.finishDate);\n\n        if ((0,date_fns__WEBPACK_IMPORTED_MODULE_1__.isToday)(finishDate)) {\n            // Clone and push the task card only if today's date is equal to the finish date\n            const clonedTaskCard = taskCard.cloneNode(true);\n            tasksForToday.push(clonedTaskCard);\n            todayTab.appendChild(clonedTaskCard);\n\n            const trashIcon = clonedTaskCard.querySelector('.fa-trash');\n            trashIcon.addEventListener('click', createTrashIconClickHandler(taskCard, clonedTaskCard));\n        }\n    }\n}\n\nfunction createTrashIconClickHandler(originalTaskCard, clonedTaskCard) {\n    return function () {\n        removeFromTaskCardArray(originalTaskCard); // Remove from original array\n        originalTaskCard.remove(); // Remove from DOM\n        clonedTaskCard.remove(); // Remove from cloned version\n    };\n}\n\nconst clonedProjectsArray = []\nfunction moveProjectsToProjectsTab() {\n    clonedProjectsArray.length = 0;\n\n    for (let i = 0; i < projectTabs.length; i++) {\n        const projects = projectTabs[i];\n        const clonedProject = projects.cloneNode(true);\n        const projectName = clonedProject.textContent;\n        const tabID = clonedProject.id; // Get the tabID from the cloned project button\n        const tabContent = contentArray[i]; // Retrieve tabContent from contentArray\n        clonedProject.addEventListener('click', () => {\n            // Hide all content elements\n            contentArray.forEach(content => {\n                content.style.display = 'none';\n            });\n            // Show the corresponding content\n            (0,_DOM__WEBPACK_IMPORTED_MODULE_0__.appendFormToContent)();\n            tabContent.style.display = 'block';\n            createButtonForTab();\n            addProjectNameToContent(projectName); \n            document.getElementById('content').appendChild(tabContent);\n            currentProjectTabID = tabID;\n            console.log(currentProjectTabID);\n        });\n\n        // Add cloned project to the array\n        clonedProjectsArray.push(clonedProject);\n        console.log(clonedProjectsArray);\n    }\n    displayClonedProjectsInTab()\n}\n\nfunction displayClonedProjectsInTab() {\n    const projectTabContent = document.getElementById('project-tab-content');\n\n    // Clear existing content in the tab\n    projectTabContent.innerHTML = '';\n\n    // Iterate through the cloned projects array and append each project to the tab\n    clonedProjectsArray.forEach(clonedProject => {\n        projectTabContent.appendChild(clonedProject);\n    });\n    console.log(clonedProjectsArray);\n}\n\n//# sourceURL=webpack://to-do-list/./src/form.js?");

/***/ }),

/***/ "./src/incoming.js":
/*!*************************!*\
  !*** ./src/incoming.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showIncoming: () => (/* binding */ showIncoming)\n/* harmony export */ });\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form */ \"./src/form.js\");\n\n\n\nfunction showIncoming() {\n    const incomingTab = document.getElementById('incoming-tab');\n    incomingTab.addEventListener('click', () => {\n        (0,_DOM__WEBPACK_IMPORTED_MODULE_0__.appendIncomingToContent)()\n        ;(0,_form__WEBPACK_IMPORTED_MODULE_1__.moveTaskCardsToIncomingTab)()\n    });\n}\n\n\n//# sourceURL=webpack://to-do-list/./src/incoming.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _incoming__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./incoming */ \"./src/incoming.js\");\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form */ \"./src/form.js\");\n/* harmony import */ var _today__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./today */ \"./src/today.js\");\n/* harmony import */ var _projects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./projects */ \"./src/projects.js\");\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n\n\n\n\n\n\n// Call the functions\n(0,_incoming__WEBPACK_IMPORTED_MODULE_0__.showIncoming)();\n(0,_today__WEBPACK_IMPORTED_MODULE_2__.showToday)()\n;(0,_projects__WEBPACK_IMPORTED_MODULE_3__.showProject)()\n;(0,_form__WEBPACK_IMPORTED_MODULE_1__.openForm)();\n(0,_form__WEBPACK_IMPORTED_MODULE_1__.closeForm)();\n\n// Call getSubmittedName to handle the submission of the project name\n(0,_form__WEBPACK_IMPORTED_MODULE_1__.getSubmittedName)(function(projectName, event) {\n    event.preventDefault(); // Prevent form submission\n    // Create a new tab for the submitted project name\n    const projectTab = (0,_form__WEBPACK_IMPORTED_MODULE_1__.createProjectTab)(projectName);\n    \n    \n    // Get reference to the wrapper container\n    const projectsContainerWrapper = document.querySelector('.projects-container-wrapper');\n    \n    // Append the new project tab to the wrapper container\n    projectsContainerWrapper.appendChild(projectTab);\n    (0,_form__WEBPACK_IMPORTED_MODULE_1__.moveProjectsToProjectsTab)()\n});\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://to-do-list/./src/index.js?");

/***/ }),

/***/ "./src/projects.js":
/*!*************************!*\
  !*** ./src/projects.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showProject: () => (/* binding */ showProject)\n/* harmony export */ });\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form */ \"./src/form.js\");\n\n\n\nfunction showProject() {\n    const projectTab = document.getElementById('projects-tab');\n    projectTab.addEventListener('click', () => {\n        (0,_DOM__WEBPACK_IMPORTED_MODULE_0__.appendProjectToContent)()\n        ;(0,_form__WEBPACK_IMPORTED_MODULE_1__.displayClonedProjectsInTab)()\n        \n    });\n}\n\n\n//# sourceURL=webpack://to-do-list/./src/projects.js?");

/***/ }),

/***/ "./src/today.js":
/*!**********************!*\
  !*** ./src/today.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showToday: () => (/* binding */ showToday)\n/* harmony export */ });\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form */ \"./src/form.js\");\n\n\n\nfunction showToday() {\n    const todayTab = document.getElementById('today-tab');\n    todayTab.addEventListener('click', () => {\n        (0,_DOM__WEBPACK_IMPORTED_MODULE_0__.appendTodayToContent)();\n        (0,_form__WEBPACK_IMPORTED_MODULE_1__.appendTaskCardToTasksForTodayArray)()\n    });\n}\n\n\n//# sourceURL=webpack://to-do-list/./src/today.js?");

/***/ }),

/***/ "./node_modules/date-fns/constructFrom.mjs":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/constructFrom.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructFrom: () => (/* binding */ constructFrom),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nfunction constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constructFrom);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/constructFrom.mjs?");

/***/ }),

/***/ "./node_modules/date-fns/constructNow.mjs":
/*!************************************************!*\
  !*** ./node_modules/date-fns/constructNow.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructNow: () => (/* binding */ constructNow),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.mjs */ \"./node_modules/date-fns/constructFrom.mjs\");\n\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nfunction constructNow(date) {\n  return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(date, Date.now());\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constructNow);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/constructNow.mjs?");

/***/ }),

/***/ "./node_modules/date-fns/isSameDay.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/isSameDay.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isSameDay: () => (/* binding */ isSameDay)\n/* harmony export */ });\n/* harmony import */ var _startOfDay_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./startOfDay.mjs */ \"./node_modules/date-fns/startOfDay.mjs\");\n\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nfunction isSameDay(dateLeft, dateRight) {\n  const dateLeftStartOfDay = (0,_startOfDay_mjs__WEBPACK_IMPORTED_MODULE_0__.startOfDay)(dateLeft);\n  const dateRightStartOfDay = (0,_startOfDay_mjs__WEBPACK_IMPORTED_MODULE_0__.startOfDay)(dateRight);\n\n  return +dateLeftStartOfDay === +dateRightStartOfDay;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSameDay);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/isSameDay.mjs?");

/***/ }),

/***/ "./node_modules/date-fns/isToday.mjs":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/isToday.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isToday: () => (/* binding */ isToday)\n/* harmony export */ });\n/* harmony import */ var _constructNow_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructNow.mjs */ \"./node_modules/date-fns/constructNow.mjs\");\n/* harmony import */ var _isSameDay_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSameDay.mjs */ \"./node_modules/date-fns/isSameDay.mjs\");\n\n\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nfunction isToday(date) {\n  return (0,_isSameDay_mjs__WEBPACK_IMPORTED_MODULE_0__.isSameDay)(date, (0,_constructNow_mjs__WEBPACK_IMPORTED_MODULE_1__.constructNow)(date));\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isToday);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/isToday.mjs?");

/***/ }),

/***/ "./node_modules/date-fns/startOfDay.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/startOfDay.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   startOfDay: () => (/* binding */ startOfDay)\n/* harmony export */ });\n/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ \"./node_modules/date-fns/toDate.mjs\");\n\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(date) {\n  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfDay);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/startOfDay.mjs?");

/***/ }),

/***/ "./node_modules/date-fns/toDate.mjs":
/*!******************************************!*\
  !*** ./node_modules/date-fns/toDate.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   toDate: () => (/* binding */ toDate)\n/* harmony export */ });\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toDate);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/toDate.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;